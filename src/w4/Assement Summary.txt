See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  24/49 tests passed
Memory:       18/22 tests passed
Timing:       101/125 tests passed

Aggregate score: 63.73%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.3K Jan 13 12:51 Board.java
3.5K Jan 13 12:51 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 9
    - moves()              = 7

  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 10
    - moves()              = 8

  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 21
    - moves()              = 11

  * puzzle12.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 21
    - moves()              = 12

  * puzzle13.txt
==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 80
    - moves()              = 14

  * puzzle15.txt
  * puzzle16.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 29
    - moves()              = 16

  * puzzle17.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 79
    - moves()              = 17

  * puzzle18.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 205
    - moves()              = 18

  * puzzle19.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 364
    - moves()              = 19

  * puzzle20.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 337
    - moves()              = 20

  * puzzle21.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 587
    - moves()              = 21

  * puzzle22.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 888
    - moves()              = 22

  * puzzle23.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1304
    - moves()              = 23

  * puzzle24.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 689
    - moves()              = 24

  * puzzle25.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2331
    - moves()              = 25

  * puzzle26.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1707
    - moves()              = 26

  * puzzle27.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1823
    - moves()              = 27

  * puzzle28.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4749
    - moves()              = 28

  * puzzle29.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3343
    - moves()              = 29

  * puzzle30.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 10353
    - moves()              = 30

  * puzzle31.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 12422
    - moves()              = 31

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 5

    - failed on trial 3 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt


Total: 0/25 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4648
=> passed  puzzle15.txt      15     5576
=> FAILED  puzzle20.txt      20    43208   (8.6x)
=> FAILED  puzzle25.txt      25   298440  (47.9x)
=> FAILED  puzzle30.txt      30  1325256 (178.6x)
=> FAILED  puzzle35.txt      35  8885216 (877.8x)
==> 2/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      23184               21               20
=> passed  puzzle15.txt      27768               29               28
=> passed  puzzle20.txt     186288              231              230
=> passed  puzzle25.txt    1284416             1554             1553
=> passed  puzzle30.txt    5654704             6605             6604
=> passed  puzzle35.txt   38397784            58754            58753
==> 6/6 tests passed


Total: 8/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02
=> passed  puzzle22.txt      22    3     0.01
=> passed  puzzle21.txt      21    3     0.00
=> passed  puzzle23.txt      23    3     0.01
=> passed  puzzle24.txt      24    3     0.00
=> passed  puzzle25.txt      25    3     0.01
=> passed  puzzle27.txt      27    3     0.01
=> passed  puzzle29.txt      29    3     0.01
=> passed  puzzle26.txt      26    3     0.01
=> passed  puzzle28.txt      28    3     0.02
=> passed  puzzle30.txt      30    3     0.03
=> passed  puzzle31.txt      31    3     0.04
=> passed  puzzle39.txt      39    4     0.05
=> passed  puzzle41.txt      41    5     0.04
=> passed  puzzle34.txt      34    4     0.15
=> passed  puzzle37.txt      37    4     0.06
=> passed  puzzle44.txt      44    5     0.19
=> passed  puzzle32.txt      32    4     0.28
=> passed  puzzle35.txt      35    4     0.13
=> passed  puzzle33.txt      33    4     0.25
=> passed  puzzle43.txt      43    4     0.36
=> passed  puzzle46.txt      46    4     0.35
=> passed  puzzle40.txt      40    4     0.17
=> passed  puzzle36.txt      36    4     1.51
=> passed  puzzle45.txt      45    4     0.53
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt        903              673
=> passed  puzzle22.txt       2396             1775
=> passed  puzzle21.txt       1578             1173
=> passed  puzzle23.txt       3494             2607
=> passed  puzzle24.txt       1823             1377
=> passed  puzzle25.txt       6214             4661
=> passed  puzzle27.txt       4811             3645
=> passed  puzzle29.txt       8761             6685
=> passed  puzzle26.txt       4521             3413
=> passed  puzzle28.txt      12532             9497
=> passed  puzzle30.txt      27309            20705
=> passed  puzzle31.txt      32664            24843
=> passed  puzzle39.txt      30294            20103
=> passed  puzzle41.txt      20239            12165
=> passed  puzzle34.txt     110247            71581
=> passed  puzzle37.txt      46738            30359
=> passed  puzzle44.txt     110090            68059
=> passed  puzzle32.txt     295499           191823
=> passed  puzzle35.txt     175670           116917
=> passed  puzzle33.txt     342830           221839
=> passed  puzzle43.txt     483498           319145
=> passed  puzzle46.txt     451839           299781
=> passed  puzzle40.txt     233770           155065
=> passed  puzzle36.txt    1474554           966995
=> passed  puzzle45.txt     692234           459267
==> 25/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0
=> passed  puzzle22.txt            0            0            0
=> passed  puzzle21.txt            0            0            0
=> passed  puzzle23.txt            0            0            0
=> passed  puzzle24.txt            0            0            0
=> passed  puzzle25.txt            0            0            0
=> passed  puzzle27.txt            0            0            0
=> passed  puzzle29.txt            0            0            0
=> passed  puzzle26.txt            0            0            0
=> passed  puzzle28.txt            0            0            0
=> passed  puzzle30.txt            0            0            0
=> passed  puzzle31.txt            0            0            0
=> passed  puzzle39.txt            0            0            0
=> passed  puzzle41.txt            0            0            0
=> passed  puzzle34.txt            0            0            0
=> passed  puzzle37.txt            0            0            0
=> passed  puzzle44.txt            0            0            0
=> passed  puzzle32.txt            0            0            0
=> passed  puzzle35.txt            0            0            0
=> passed  puzzle33.txt            0            0            0
=> passed  puzzle43.txt            0            0            0
=> passed  puzzle46.txt            0            0            0
=> passed  puzzle40.txt            0            0            0
=> passed  puzzle36.txt            0            0            0
=> passed  puzzle45.txt            0            0            0
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2074                2064                9572
=> passed  puzzle22.txt       4611                4605               26501
=> passed  puzzle21.txt       3234                3226               16979
=> passed  puzzle23.txt       7182                7174               42483
=> passed  puzzle24.txt       4226                4216               21952
=> passed  puzzle25.txt      12812               12804               83301
=> passed  puzzle27.txt       9969                9961               64260
=> passed  puzzle29.txt      18225               18217              126094
=> passed  puzzle26.txt       8784                8778               56164
=> passed  puzzle28.txt      29145               29135              199259
=> passed  puzzle30.txt      53187               53181              440876
=> passed  puzzle31.txt      67851               67843              551627
=> passed  puzzle39.txt      60443               60435              491513
=> passed  puzzle41.txt      43803               43793              291640
=> passed  puzzle34.txt     199720              199714             1821556
=> passed  puzzle37.txt      92272               92264              749917
=> passed  puzzle44.txt     237693              237683             1892439
=> passed  puzzle32.txt     655163              655153             5471530
=> passed  puzzle35.txt     394884              394874             3373875
=> passed  puzzle33.txt     675583              675575             6169745
=> passed  puzzle43.txt     962210              962202             9810949
=> passed  puzzle46.txt     901504              901496             9547724
=> passed  puzzle40.txt     427598              427592             4366941
=> passed  puzzle36.txt    3287663             3287653            32177233
=> passed  puzzle45.txt    1381131             1381123            14678171
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2074                2064                9572   (2.4x)
=> FAILED  puzzle22.txt       4611                4605               26501   (2.7x)
=> FAILED  puzzle21.txt       3234                3226               16979   (1.7x)
=> FAILED  puzzle23.txt       7182                7174               42483   (2.9x)
=> FAILED  puzzle24.txt       4226                4216               21952   (1.4x)
=> FAILED  puzzle25.txt      12812               12804               83301   (2.9x)
=> FAILED  puzzle27.txt       9969                9961               64260   (2.0x)
=> FAILED  puzzle29.txt      18225               18217              126094   (3.9x)
=> FAILED  puzzle26.txt       8784                8778               56164   (1.7x)
=> FAILED  puzzle28.txt      29145               29135              199259   (2.6x)
=> FAILED  puzzle30.txt      53187               53181              440876   (3.6x)
=> FAILED  puzzle31.txt      67851               67843              551627   (4.3x)
=> FAILED  puzzle39.txt      60443               60435              491513   (2.6x)
=> passed  puzzle41.txt      43803               43793              291640
=> FAILED  puzzle34.txt     199720              199714             1821556   (4.6x)
=> FAILED  puzzle37.txt      92272               92264              749917   (1.7x)
=> FAILED  puzzle44.txt     237693              237683             1892439   (2.7x)
=> FAILED  puzzle32.txt     655163              655153             5471530   (4.1x)
=> FAILED  puzzle35.txt     394884              394874             3373875   (2.5x)
=> FAILED  puzzle33.txt     675583              675575             6169745   (3.8x)
=> FAILED  puzzle43.txt     962210              962202             9810949   (3.6x)
=> FAILED  puzzle46.txt     901504              901496             9547724   (3.5x)
=> FAILED  puzzle40.txt     427598              427592             4366941   (1.5x)
=> FAILED  puzzle36.txt    3287663             3287653            32177233   (5.9x)
=> FAILED  puzzle45.txt    1381131             1381123            14678171   (2.3x)
==> 1/25 tests passed


Total: 101/125 tests passed!


================================================================