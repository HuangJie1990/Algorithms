See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 19 warnings)

Correctness:  32/36 tests passed
Memory:       16/16 tests passed
Timing:       36/42 tests passed

Aggregate score: 90.48%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.5K Jan 28 10:55 KdTree.java
2.2K Jan 28 10:55 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'h', but its value might be null on some execution branch.  Dereferenced at KdTree.java:[line 112]
L D NP_LOAD_OF_KNOWN_NULL_VALUE NP: The variable 'near' is known to be null at this point due to an earlier check against null.  At KdTree.java:[line 135]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'min' but that value is never used.  At KdTree.java:[line 153]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:173: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:174: The private instance (or static) variable 'rect' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:77: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:15:17: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:20:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:25:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:30:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:60:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:75:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:102:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:117:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:140:56: Use the primitive type instead of the corresponding wrapper type 'Double'. For example, use 'boolean' instead of 'Boolean'. [WrapperType]
[WARN] KdTree.java:142:9: Use the primitive type instead of the corresponding wrapper type 'Double'. For example, use 'boolean' instead of 'Boolean'. [WrapperType]
[WARN] PointSET.java:15:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:20:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:25:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:30:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:36:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:42:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:50:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:61:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 18 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:68:38: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:172)
    KdTree.range(KdTree.java:112)
    KdTree.range(KdTree.java:106)
    TestKdTree.checkRange(TestKdTree.java:552)
    TestKdTree.checkRange(TestKdTree.java:504)
    TestKdTree.test3a(TestKdTree.java:1347)
    TestKdTree.main(TestKdTree.java:1657)

  * input1.txt
  * input5.txt
  * input10.txt
==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.16, 0.65)
    - student   nearest()           = (0.4, 0.7)
    - reference nearest()           = (0.4, 0.7)
    - student   distanceSquaredTo() = 0.0601
    - reference distanceSquaredTo() = 0.0601
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C D
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.96, 0.37)
    - student   nearest()           = (0.785, 0.725)
    - reference nearest()           = (0.785, 0.725)
    - student   distanceSquaredTo() = 0.15665
    - reference distanceSquaredTo() = 0.15665
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D B G J H I
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B G J H I

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.1875 0.0
      B  0.25 0.875
      C  0.8125 0.75
      D  0.5 0.6875
      E  0.4375 1.0
      F  1.0 0.9375
      G  0.625 0.5
      H  0.0625 0.625
      I  0.875 0.5625
      J  0.5625 0.3125
    - query point                   = (0.75, 0.0625)
    - student   nearest()           = (0.5625, 0.3125)
    - reference nearest()           = (0.5625, 0.3125)
    - student   distanceSquaredTo() = 0.09765625
    - reference distanceSquaredTo() = 0.09765625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A H B C D G J I
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C D G J I

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.21875 0.25
      B  0.4375 0.71875
      C  0.65625 0.5625
      D  0.0625 0.09375
      E  0.25 0.6875
      F  0.59375 0.1875
      G  0.96875 0.875
      H  0.46875 0.3125
      I  0.1875 0.375
      J  0.375 0.125
      K  1.0 0.84375
      L  0.9375 1.0
      M  0.0 0.8125
      N  0.71875 0.28125
      O  0.875 0.59375
      P  0.125 0.03125
      Q  0.625 0.5
      R  0.90625 0.53125
      S  0.8125 0.625
      T  0.84375 0.9375
    - query point                   = (0.78125, 0.34375)
    - student   nearest()           = (0.71875, 0.28125)
    - reference nearest()           = (0.71875, 0.28125)
    - student   distanceSquaredTo() = 0.0078125
    - reference distanceSquaredTo() = 0.0078125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D I B C E F H J Q N O S
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C N O S

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 3 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 11
    - number of reference entries = 8
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.125, 0.125)
    - reference entry 1 = (0.265625, 0.453125)

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.578125, 0.390625)
    - reference entry 1 = (0.7734375, 0.8984375)

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 27
    - number of reference entries = 17
    - entry 4 of the two sequences are not equal
    - student   entry 4 = (0.3818359375, 0.015625)
    - reference entry 4 = (0.29248046875, 0.3212890625)

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:172)
    KdTree.range(KdTree.java:112)
    KdTree.range(KdTree.java:106)
    TestKdTree.checkAll(TestKdTree.java:881)
    TestKdTree.test9(TestKdTree.java:1561)
    TestKdTree.main(TestKdTree.java:1708)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.range([0.0380859375, 0.1318359375] x [0.017578125, 0.52734375])

  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:172)
    KdTree.range(KdTree.java:112)
    KdTree.range(KdTree.java:106)
    TestKdTree.checkAll(TestKdTree.java:881)
    TestKdTree.test9(TestKdTree.java:1563)
    TestKdTree.main(TestKdTree.java:1708)

    - sequence of operations was:
           st.range([0.5322265625, 0.630859375] x [0.2802734375, 0.701171875])

==> FAILED

Test 10: check that two KdTree objects can be created at the same time
==> passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed


Total: 24/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          168                160
=> passed        2          304                288
=> passed        5          712                672
=> passed       10         1392               1312
=> passed       25         3432               3232
=> passed      100        13632              12832
=> passed      400        54432              51232
=> passed      800       108832             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1482517
=> passed   320000    1520355
=> passed   640000    1228374
=> passed  1280000     994697
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     298645
=> passed   320000     353378
=> passed   640000     317998
=> passed  1280000     330286
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3965
=> passed    20000       1841
=> passed    40000        762
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4572
=> passed    20000       2085
=> passed    40000        829
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     714512               1.0              33.2              31.7              21.6
=> passed   320000     505037               1.0              33.8              32.3              22.0
=> passed   640000     401981               1.0              36.1              34.6              23.5
=> passed  1280000     527841               1.0              39.2              37.7              25.6
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     396120              18.5              17.5              18.0
=> passed    20000     404606              19.7              18.7              19.2
=> passed    40000     362562              21.8              20.8              21.3
=> passed    80000     327984              22.0              21.0              21.5
=> passed   160000     304191              23.2              22.2              22.7
=> passed   320000     276006              25.0              24.0              24.5
=> passed   640000     250014              25.7              24.7              25.2
=> passed  1280000     225962              27.2              26.2              26.7
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     270756              49.4              31.1              50.1              12.1
=> passed    20000     259423              51.7              32.6              53.3              16.2
=> passed    40000     229534              63.9              39.3              63.1              14.1
=> passed    80000     211662              66.1              40.7              65.2              14.9
=> passed   160000     175733              69.0              42.5              70.9              20.4
=> passed   320000     157213              66.0              40.2              65.2              15.7
=> passed   640000     132736              71.0              43.3              70.7              19.2
=> passed  1280000     119007              77.7              47.0              74.8              14.2
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   102513                 322.5                  232.1                   641.4             600.4
=> passed    20000    96836                 312.3                  226.1                   605.6             586.7
=> FAILED    40000    52583                 718.7   (1.2x)         504.6   (1.7x)         1427.5   (1.8x)   1303.3   (1.6x)
=> FAILED    80000    54109                 639.6   (1.1x)         454.4   (1.5x)         1197.3   (1.5x)   1241.0   (1.6x)
=> FAILED   160000    28508                1314.8   (2.2x)         914.1   (3.0x)         2568.0   (3.2x)   2347.1   (2.9x)
=> FAILED   320000    19789                1636.3   (2.7x)        1146.5   (3.8x)         3106.6   (3.9x)   3158.9   (3.9x)
=> FAILED   640000    16898   (0.8x)       1663.6   (2.8x)        1166.4   (3.9x)         3190.9   (4.0x)   3166.1   (4.0x)
=> FAILED  1280000    10322   (0.5x)       1996.8   (3.3x)        1402.4   (4.7x)         3888.5   (4.9x)   3889.9   (4.9x)
==> 2/8 tests passed



Total: 22/28 tests passed!


================================================================